package com.rest.controller;


import java.util.Collection;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ObjectUtils;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.service.annotation.PutExchange;

import com.rest.entity.TourPackage;
import com.rest.service.ITourService;

@RestController
@RequestMapping("/tour")
public class TourController 
{
	@Autowired
	private ITourService tourService;

	//http:localhost:3306/tour/add
	@PostMapping("/add")
	public ResponseEntity<?> createTeam(@RequestBody TourPackage newTour) 
	{
		try 
		{
			Boolean isCreated = tourService.createTeam(newTour);
			if(!ObjectUtils.isEmpty(isCreated)) {
				return new ResponseEntity<>("Tour Package is added successfully",HttpStatus.CREATED);
			}
			else {
				return new ResponseEntity<>("Failed to create a new package.",HttpStatus.BAD_REQUEST);
			}
			
		} catch (Exception e) 
		{
			return new ResponseEntity<>(e.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@GetMapping("/all")
	public ResponseEntity<?> getAllPackages() 
	{
		Collection<TourPackage> allPackages = tourService.allTAllTourPackage();
		if(CollectionUtils.isEmpty(allPackages)) {
			return new ResponseEntity<>("Team not available!!", HttpStatus.NO_CONTENT);
		}else {
			return new ResponseEntity<>(allPackages, HttpStatus.OK);
		}
	}
	
	@PostMapping("/name/{name}")
	public ResponseEntity<?> getTeamByName(@PathVariable String name)
	{
		
		try {
			TourPackage foundTourPackage = tourService.getTourByName(name);
			return new ResponseEntity<>(foundTourPackage, HttpStatus.OK);
		} 
		catch (Exception e) 
		{
			return new ResponseEntity<>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
	
	@DeleteMapping("/delete/{id}")
    public String deleteDepartmentById(@PathVariable Integer id)
    {
        tourService.deleteTourPackage(id);
        return "Deleted Successfully";
    }
	
	@PutMapping("/update/{id}")
	public TourPackage updateTourPackage(@PathVariable Integer id, @RequestBody TourPackage updatedPackage) 
	{
        return tourService.updateTourPackage(id, updatedPackage);
    }
}


